import Utils.ExcelAdapter;
import Utils.TDoc;
import java.awt.Color;
import java.awt.Component;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.JSlider;
import javax.swing.JTree;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableColumn;
import javax.swing.text.Position;
import javax.swing.tree.DefaultMutableTreeNode;
import javax.swing.tree.DefaultTreeCellRenderer;
import javax.swing.tree.DefaultTreeModel;
import javax.swing.tree.MutableTreeNode;
import javax.swing.tree.TreeModel;
import javax.swing.tree.TreePath;
/*
 * DetectedEventsTablesPanel.java
 *
 * Created on October 11, 2006, 3:38 PM
 */

/**
 *
 * @author  Dmitry
 */
public class DetectedEventsTablesPanel extends javax.swing.JPanel {
    
    
    /** Creates new form DetectedEventsTablesPanel */
    public DetectedEventsTablesPanel() {
        initComponents();
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        addbutton = new javax.swing.JButton();
        clearbutton = new javax.swing.JButton();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jScrollPane1 = new javax.swing.JScrollPane();

        DetectedEventsTree = new javax.swing.JTree();
        progress = new javax.swing.JProgressBar();
        jPanel1 = new javax.swing.JPanel();
        runOnlyUpdateable = new javax.swing.JCheckBox();
        runOnStoks = new javax.swing.JCheckBox();
        runOnOptions = new javax.swing.JCheckBox();
        notOlderThan = new javax.swing.JCheckBox();
        notolderdays = new javax.swing.JSlider();
        lbl_odays = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        jButton4 = new javax.swing.JButton();
        jButton5 = new javax.swing.JButton();
        jButton6 = new javax.swing.JButton();
        skipflats = new javax.swing.JCheckBox();
        lbl_totalprocessed = new javax.swing.JLabel();
        removebutton = new javax.swing.JButton();
        lbl_totalskiped = new javax.swing.JLabel();
        markocurences = new javax.swing.JToggleButton();
        jPanel2 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();

        setMaximumSize(new java.awt.Dimension(447, 500));
        setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        addbutton.setText("add");
        addbutton.setEnabled(false);
        addbutton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addbuttonActionPerformed(evt);
            }
        });
        add(addbutton, new org.netbeans.lib.awtextra.AbsoluteConstraints(150, 570, -1, -1));

        clearbutton.setText("clear");
        clearbutton.setEnabled(false);
        clearbutton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                clearbuttonActionPerformed(evt);
            }
        });
        add(clearbutton, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 570, -1, -1));

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ID", "Symbol", "Event", "Value"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        TableColumn tcg=jTable1.getColumn("ID");
        tcg.setPreferredWidth(0);
        tcg.setMinWidth(0);
        tcg.setMaxWidth(0);
        jTable1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                jTable1MousePressed(evt);
            }
        });
        jScrollPane2.setViewportView(jTable1);

        jTabbedPane1.addTab("Table view", jScrollPane2);

        DefaultMutableTreeNode root = new DefaultMutableTreeNode("Tickers");
        root.add(new DefaultMutableTreeNode("Empty"));
        DetectedEventsTree.setBorder(javax.swing.BorderFactory.createTitledBorder(new javax.swing.border.MatteBorder(null), "Detected Events and Indicators"));
        DetectedEventsTree=new JTree(root);
        DetectedEventsTree.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                DetectedEventsTreeMousePressed(evt);
            }
        });
        jScrollPane1.setViewportView(DetectedEventsTree);

        jTabbedPane1.addTab("List view", jScrollPane1);

        add(jTabbedPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 130, -1, 320));

        progress.setMaximumSize(new java.awt.Dimension(120, 17));
        progress.setMinimumSize(new java.awt.Dimension(120, 17));
        progress.setPreferredSize(new java.awt.Dimension(120, 17));
        progress.setStringPainted(true);
        add(progress, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 540, 380, -1));

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Run Tests on...", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 0, 11), new java.awt.Color(0, 0, 255))); // NOI18N

        runOnlyUpdateable.setSelected(true);
        runOnlyUpdateable.setText("Only Updateable");
        runOnlyUpdateable.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
        runOnlyUpdateable.setMargin(new java.awt.Insets(0, 0, 0, 0));

        runOnStoks.setSelected(true);
        runOnStoks.setText("On Stoks");
        runOnStoks.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
        runOnStoks.setMargin(new java.awt.Insets(0, 0, 0, 0));

        runOnOptions.setText("On Options");
        runOnOptions.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
        runOnOptions.setMargin(new java.awt.Insets(0, 0, 0, 0));

        notOlderThan.setText("Data Not Older than");
        notOlderThan.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
        notOlderThan.setMargin(new java.awt.Insets(0, 0, 0, 0));
        notOlderThan.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                notOlderThanItemStateChanged(evt);
            }
        });

        notolderdays.setMaximum(365);
        notolderdays.setMinimum(1);
        notolderdays.setValue(1);
        notolderdays.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                notolderdaysStateChanged(evt);
            }
        });

        lbl_odays.setText("1 day");
        lbl_odays.setEnabled(false);

        jButton1.setText("remove");
        jButton1.setEnabled(false);
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton4.setText("remove");
        jButton4.setEnabled(false);
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton5.setText("remove");
        jButton5.setEnabled(false);
        jButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton6.setText("remove");
        jButton6.setEnabled(false);
        jButton6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        skipflats.setSelected(true);
        skipflats.setText("Skip FLATS");

        org.jdesktop.layout.GroupLayout jPanel1Layout = new org.jdesktop.layout.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(jPanel1Layout.createSequentialGroup()
                        .add(runOnStoks)
                        .add(25, 25, 25)
                        .add(runOnOptions))
                    .add(jPanel1Layout.createSequentialGroup()
                        .add(runOnlyUpdateable)
                        .add(34, 34, 34)
                        .add(skipflats))
                    .add(jPanel1Layout.createSequentialGroup()
                        .add(notOlderThan)
                        .add(17, 17, 17)
                        .add(notolderdays, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 57, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .add(22, 22, 22)
                        .add(lbl_odays, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 56, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(81, Short.MAX_VALUE))
            .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                .add(0, 358, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(org.jdesktop.layout.GroupLayout.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(runOnlyUpdateable)
                    .add(skipflats))
                .add(15, 15, 15)
                .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(runOnStoks)
                    .add(runOnOptions))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(org.jdesktop.layout.GroupLayout.TRAILING, notOlderThan)
                    .add(org.jdesktop.layout.GroupLayout.TRAILING, jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING, false)
                        .add(org.jdesktop.layout.GroupLayout.TRAILING, lbl_odays, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .add(org.jdesktop.layout.GroupLayout.TRAILING, notolderdays, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addContainerGap())
            .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                .add(0, 100, Short.MAX_VALUE))
        );

        add(jPanel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 370, -1));

        lbl_totalprocessed.setText("Total processed: 0");
        add(lbl_totalprocessed, new org.netbeans.lib.awtextra.AbsoluteConstraints(180, 500, -1, -1));

        removebutton.setText("remove");
        removebutton.setEnabled(false);
        removebutton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });
        add(removebutton, new org.netbeans.lib.awtextra.AbsoluteConstraints(200, 570, -1, -1));

        lbl_totalskiped.setText("Skiped : 0");
        add(lbl_totalskiped, new org.netbeans.lib.awtextra.AbsoluteConstraints(90, 500, -1, -1));

        markocurences.setText("Mark Ocurences");
        markocurences.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                markocurencesStateChanged(evt);
            }
        });
        markocurences.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                markocurencesItemStateChanged(evt);
            }
        });
        add(markocurences, new org.netbeans.lib.awtextra.AbsoluteConstraints(80, 460, -1, -1));

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 12));
        jLabel1.setForeground(new java.awt.Color(255, 0, 51));
        jLabel1.setText("good");

        jLabel2.setFont(new java.awt.Font("Tahoma", 1, 12));
        jLabel2.setForeground(new java.awt.Color(0, 153, 0));
        jLabel2.setText("ok");

        jLabel3.setFont(new java.awt.Font("Tahoma", 1, 12));
        jLabel3.setForeground(new java.awt.Color(0, 0, 255));
        jLabel3.setText("average");

        jLabel4.setFont(new java.awt.Font("Tahoma", 1, 12));
        jLabel4.setForeground(new java.awt.Color(153, 153, 153));
        jLabel4.setText("some");

        jLabel5.setFont(new java.awt.Font("Tahoma", 1, 12));
        jLabel5.setText("poor");

        org.jdesktop.layout.GroupLayout jPanel2Layout = new org.jdesktop.layout.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .add(jLabel1)
                .add(16, 16, 16)
                .add(jLabel2)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jLabel3)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jLabel4)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jLabel5)
                .addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .add(jPanel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                .add(0, 210, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .add(jPanel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jLabel1)
                    .add(jLabel2)
                    .add(jLabel3)
                    .add(jLabel4)
                    .add(jLabel5))
                .addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .add(jPanel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                .add(0, 37, Short.MAX_VALUE))
        );

        add(jPanel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(210, 450, -1, -1));
    }// </editor-fold>//GEN-END:initComponents

    private void markocurencesItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_markocurencesItemStateChanged
    boolean state=false;
    if(evt.getStateChange()==evt.SELECTED)state=true;
    jPanel2.setVisible(state);
    if(state)
    {
        DetectedEventsTree.setCellRenderer(new DefaultTreeCellRenderer()
        {
             public Component getTreeCellRendererComponent(JTree pTree,
                 Object pValue, boolean pIsSelected, boolean pIsExpanded,
                 boolean pIsLeaf, int pRow, boolean pHasFocus)
             {
	    DefaultMutableTreeNode node = (DefaultMutableTreeNode)pValue;
	    super.getTreeCellRendererComponent(pTree, pValue, pIsSelected,
                     pIsExpanded, pIsLeaf, pRow, pHasFocus);
                 if (node.isRoot())
                 {
	       setBackgroundSelectionColor(Color.WHITE);
               setForeground(Color.black);
                 }
	    else if (node.getChildCount() >0)
	       setForeground(getImportanceColor(node.getChildCount()));
	    else if (pIsLeaf)
	       setForeground(Color.black);
	    return (this);
	}
     private Color getImportanceColor(int importance)
    {
     switch(importance)
     {
         case 2:
             return Color.GRAY;
         case 3:
             return Color.BLUE;
         case 4:
             return Color.GREEN;
        case 5:
             return Color.RED;
     };
     return Color.BLACK;
    }
        });
    }
    else DetectedEventsTree.setCellRenderer(null);
    }//GEN-LAST:event_markocurencesItemStateChanged

    private void markocurencesStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_markocurencesStateChanged
    
    }//GEN-LAST:event_markocurencesStateChanged

    private void jTable1MousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTable1MousePressed
        String selsymb=(String) jTable1.getValueAt(jTable1.getSelectedRow(),1);
        System.out.println(selsymb);
        DefaultTreeModel model = (DefaultTreeModel)DetectedEventsTree.getModel();
        // Find node to which new node is to be added
        int startRow = 0;
        TreePath path = DetectedEventsTree.getNextMatch(selsymb, startRow, Position.Bias.Forward);
        //MutableTreeNode node = (MutableTreeNode)path.getLastPathComponent();
        
        DetectedEventsTree.setSelectionPath(path);
        DetectedEventsTree.scrollPathToVisible(path);

    }//GEN-LAST:event_jTable1MousePressed

    private void DetectedEventsTreeMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_DetectedEventsTreeMousePressed
    
            TreePath[] paths = DetectedEventsTree.getSelectionPaths();
            if(paths!=null)
            {
                String parts[]=paths[0].toString().split(", ");
                int j = -1;
                if(parts.length>1&&parts.length!=2)j=getFirstGoodOcurenceInTable(parts[1]);
                // Select a row - row j
                if(j>=0)jTable1.setRowSelectionInterval(j, j);
            }
        
    }//GEN-LAST:event_DetectedEventsTreeMousePressed

    private void notOlderThanItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_notOlderThanItemStateChanged
    boolean state=false;
    if(evt.getStateChange()==evt.SELECTED)state=true;
    lbl_odays.setEnabled(state);
    notolderdays.setEnabled(state);
    }//GEN-LAST:event_notOlderThanItemStateChanged

    private void notolderdaysStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_notolderdaysStateChanged
    int tdays=((JSlider)evt.getSource()).getValue();
    if(tdays>1)lbl_odays.setText(""+tdays+" days");
    else lbl_odays.setText(""+tdays+" day");
    }//GEN-LAST:event_notolderdaysStateChanged

    private void clearbuttonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_clearbuttonActionPerformed
// TODO add your handling code here:
        // The root cannot be removed with removeNodeFromParent();
        // use the following to remove the root
        DefaultTreeModel model = (DefaultTreeModel)DetectedEventsTree.getModel();
        model.setRoot(null);
        DefaultMutableTreeNode root = new DefaultMutableTreeNode("Root Label");
        root.add(new DefaultMutableTreeNode("Node Label"));
        DetectedEventsTree=new JTree(root);
}//GEN-LAST:event_clearbuttonActionPerformed

    private void addbuttonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addbuttonActionPerformed
// TODO add your handling code here:
        DefaultTreeModel model = (DefaultTreeModel)DetectedEventsTree.getModel();
        
        // Find node to which new node is to be added
        int startRow = 0;
        String prefix = "";
        TreePath path = DetectedEventsTree.getNextMatch(prefix, startRow, Position.Bias.Forward);
        MutableTreeNode node = (MutableTreeNode)path.getLastPathComponent();
        
        // Create new node
        MutableTreeNode newNode = new DefaultMutableTreeNode("green");
        
        // Insert new node as last child of node
        model.insertNodeInto(newNode, node, node.getChildCount());
}//GEN-LAST:event_addbuttonActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
// TODO add your handling code here:
        DefaultTreeModel model = (DefaultTreeModel)DetectedEventsTree.getModel();
        
        // Find node to remove
        int startRow = 0;
        String prefix = "b";
        TreePath path = DetectedEventsTree.getNextMatch(prefix, startRow, Position.Bias.Forward);
        MutableTreeNode node = (MutableTreeNode)path.getLastPathComponent();
        
        // Remove node; if node has descendants, all descendants are removed as well
        model.removeNodeFromParent(node);
    }//GEN-LAST:event_jButton1ActionPerformed
    
 public void addtotree(String prefix,String indicator,String value)
    {
        int startRow = 0;
        DefaultTreeModel model = (DefaultTreeModel)DetectedEventsTree.getModel();
        TreePath path1 = null,path = DetectedEventsTree.getNextMatch(prefix, startRow, Position.Bias.Forward);
        MutableTreeNode newNode,newNode2,newNode3,node = null;
        if(path==null)//stock not exist in nodes then find begining of tree
         path1 = DetectedEventsTree.getNextMatch("Tickers", startRow, Position.Bias.Forward);
        if(path!=null)//verry similar stock node exists in tree
        {
        String tep=path.toString();
        tep=tep.replace("[","");
        tep=tep.replace("]","");
        String ttt[]=tep.split(", ");
        if(ttt[1].startsWith(prefix)&&!ttt[1].equals(prefix))//but this is just partionaly name
        {
         //get next row
         startRow=DetectedEventsTree.getRowForPath(path);
         if(startRow+1<DetectedEventsTree.getRowCount())//it is in range
         {
          //try to find out the exact stock from next position
          path = DetectedEventsTree.getNextMatch(prefix, startRow+1, Position.Bias.Forward);
          if(path!=null)//add indicator and its value
          addNewRowToNode(model,(MutableTreeNode)path.getLastPathComponent(),indicator,value);
         }else //not exist because it is end of tree
         {
             //stock not exist in nodes then find begining of tree
             startRow=0;
             path = DetectedEventsTree.getNextMatch("Tickers", startRow, Position.Bias.Forward);
             if(path!=null)//add indicator and its value
             addNewNode(model,(MutableTreeNode)path.getLastPathComponent(),prefix,indicator,value); 
         }
        }else
        {
         if(path!=null)//add indicator and its value
          addNewRowToNode(model,(MutableTreeNode)path.getLastPathComponent(),indicator,value); 
        }
        }else
        {
          //not exists so add entire stock curen indicator and its value
          addNewNode(model,(MutableTreeNode)path1.getLastPathComponent(),prefix,indicator,value);  
        }  
    }
 private void addNewNode(DefaultTreeModel model,MutableTreeNode node,String prefix,String indicator,String value)
 {
            MutableTreeNode newNode;
            newNode = new DefaultMutableTreeNode(prefix);
            // Insert new node as last child of node
            model.insertNodeInto(newNode, node, node.getChildCount());
            addNewRowToNode(model,newNode,indicator,value);
 }
 private void addNewRowToNode(DefaultTreeModel model,MutableTreeNode newNode,String indicator,String value)
 {
            MutableTreeNode newNode3, newNode2;
            newNode2 = new DefaultMutableTreeNode(indicator);
            newNode3 = new DefaultMutableTreeNode(value);
            // Insert new node as last child of node
            model.insertNodeInto(newNode2, newNode, newNode.getChildCount());
            model.insertNodeInto(newNode3, newNode2, newNode2.getChildCount());
 }
 void addtoTable(TDoc lastdetected) {
        
     DefaultTableModel model = (DefaultTableModel) jTable1.getModel();
     model.addRow(lastdetected.o);
    }
 int getIDofStock()
 {
     DefaultTableModel model = (DefaultTableModel) jTable1.getModel();
    int sr=jTable1.getSelectedRow();
    if(sr<0)
    {
        JOptionPane.showMessageDialog(this, "Nothing is selected", "Select ? :)",
                                      JOptionPane.INFORMATION_MESSAGE);
        return -1;
    }
    int menayaid=Integer.parseInt(model.getValueAt(sr,0).toString());
    return menayaid;
 }
 String getSymbolofStock() {
        DefaultTableModel model = (DefaultTableModel) jTable1.getModel();
    int sr=jTable1.getSelectedRow();
    if(sr<0)return null;
    return model.getValueAt(sr,1).toString();
    }
void tableToExcell() {
        jTable1.setCellSelectionEnabled(true);
        ExcelAdapter ea=new ExcelAdapter(jTable1);
    }
 
 
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTree DetectedEventsTree;
    private javax.swing.JButton addbutton;
    private javax.swing.JButton clearbutton;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton4;
    private javax.swing.JButton jButton5;
    private javax.swing.JButton jButton6;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JTable jTable1;
    private javax.swing.JLabel lbl_odays;
    private javax.swing.JLabel lbl_totalprocessed;
    private javax.swing.JLabel lbl_totalskiped;
    private javax.swing.JToggleButton markocurences;
    public javax.swing.JCheckBox notOlderThan;
    public javax.swing.JSlider notolderdays;
    public javax.swing.JProgressBar progress;
    private javax.swing.JButton removebutton;
    public javax.swing.JCheckBox runOnOptions;
    public javax.swing.JCheckBox runOnStoks;
    public javax.swing.JCheckBox runOnlyUpdateable;
    public javax.swing.JCheckBox skipflats;
    // End of variables declaration//GEN-END:variables

    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                JFrame nf=new JFrame();
                nf.add(new DetectedEventsTablesPanel());
                nf.setSize(300,300);
                nf.setVisible(true);
               
            }
        });
    }

    void clearAll() {
        DefaultMutableTreeNode root;
        TreeModel treeModel;
        DefaultTableModel model = (DefaultTableModel) jTable1.getModel();
        int rc=model.getRowCount();
        while(rc>0)
        {
            model.removeRow(rc-1);
            rc=model.getRowCount();
        }
        root = new DefaultMutableTreeNode("Tickers");
        root.add(new DefaultMutableTreeNode("Empty"));
        treeModel = new DefaultTreeModel(root);
        DetectedEventsTree.setModel(treeModel);
    }
 
   
 public void updateTotalProcessedAndSkiped(int tp,int s)
 {
  lbl_totalprocessed.setText("Total Processed: "+tp);
  lbl_totalskiped.setText("Skiped: "+s);
   


 }

    private int getFirstGoodOcurenceInTable(String string) {
        String selsymb;
        for(int i=0;i<jTable1.getRowCount();i++)
        {
        selsymb=(String) jTable1.getValueAt(i,1);
        if(string.equalsIgnoreCase(selsymb))return i;
        }
        return -1;
    }
    //TODO THIS 
    public void removerejecteddata(String findwat) {
        DefaultTableModel model = (DefaultTableModel) jTable1.getModel();
        for(int rc=0;rc<model.getRowCount();rc++)
        {
            if(model.getValueAt(rc, 3).toString().equalsIgnoreCase(findwat))
            {
                String menayaname=model.getValueAt(rc, 1).toString();
                removeoneelementfromtablebystokfromend(menayaname);
                removenodefromtreebystockname(menayaname);
                rc=0;
            }
        }
    }
   
    private void removenodefromtreebystockname(String stkn)
    {
        TreePath path;
        DefaultTreeModel trmodel = (DefaultTreeModel)DetectedEventsTree.getModel();
        path = DetectedEventsTree.getNextMatch(stkn, 0, Position.Bias.Forward);
               if(path!=null)
               {
                 MutableTreeNode node = (MutableTreeNode)path.getLastPathComponent();
                  // Remove node; if node has descendants, all descendants are removed as well
                 trmodel.removeNodeFromParent(node);
               }
    }
    private int removeoneelementfromtablebystokfromend(String stkn)
    {
        int lremoved=0;
        DefaultTableModel model = (DefaultTableModel) jTable1.getModel();
       for(int i=0;i<model.getRowCount();i++)
                {
                   if(model.getValueAt(i, 1).toString().equalsIgnoreCase(stkn))
                   {
                       model.removeRow(i);
                       lremoved++;
                       i--;
                   }
                }
        return lremoved;
    }
}
