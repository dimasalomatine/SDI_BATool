
import DBCONNECT.TRS;
import LocalUtils.ThreadBasic;
import TechnicalTools.MarkovitchFolderModel;
import Utils.MyDefaultTableModel;
import Utils.MyTableOperations;
import Utils.TDoc;
import java.awt.Dimension;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.Enumeration;
import java.util.Vector;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JTable;
import javax.swing.table.DefaultTableModel;

/*
 * BuildFolderFrame.java
 *
 * Created on 28 ינואר 2009, 21:33
 */
import javax.swing.table.TableColumn;



/**
 *
 * @author  Dmitry
 */
public class BuildFolderFrame extends javax.swing.JFrame {
 private stockRisk plink=null;
 private int maxstokperfolder=5;
 private int curentstokperfolder=3;

    /** Creates new form BuildFolderFrame */
    public BuildFolderFrame(stockRisk plink)
    {
        initComponents();
        this.plink=plink;
        this.setVisible(true);
          initselectstoktable();
          initcolumns(maxstokperfolder);
          setexactcolumns(maxstokperfolder);
         MyTableOperations.hideColumnN(stocklangtable,"dbID");
    }

    
 
    private void checkuncheckselecttable(boolean b)
    {
         DefaultTableModel model = (DefaultTableModel)stocklangtable.getModel();
        int s= model.getRowCount();
       for(int i=0;i<s;i++)model.setValueAt(b,i,2);
    }
    
    private void initselectstoktable()
    {
      StockListNB sli = BursaAnalizer_Frame.getStoksListInstance();
        java.util.List slist=sli.sltp.slt.atd;
    
        MyTableOperations.creartable(stocklangtable);

        int ss=slist.size();
         for(int i=0;i<ss;i++)
        {
          TDoc  doc=(TDoc)slist.get(i);
          Integer id=new Integer(Integer.parseInt(doc.o[0].toString()));//id
          String simb=doc.o[2].toString();//symbol
          Object ob[]=new Object[]{id,simb,new Boolean(false)};
          MyTableOperations.adddata(stocklangtable,ob);
         }
        stocklangtable.validate();
    }
    public void initcolumns(int tmaxstokperfolder)
    {
     //TODO remove columns corectly
     MyTableOperations.creartable(artfoldertable);
     DefaultTableModel model = (DefaultTableModel)artfoldertable.getModel();
   // DefaultTableModel model = (DefaultTableModel) this.artfoldertable.getModel();
    //MyTableOperations.removeColumnAndData(artfoldertable,1);
   //  model.addColumn("FolderID");
     //model.addColumn("FolderRisk");
     //model.addColumn("FolderEarn");
     for(int i=0;i<tmaxstokperfolder;i++)
     {
       model.addColumn("ID_"+(i+1));
       model.addColumn("SYMBOL_"+(i+1));
       model.addColumn("Risk_"+(i+1));
       model.addColumn("EE_"+(i+1));
     }
    // artfoldertable.setAutoResizeMode(artfoldertable.AUTO_RESIZE_ALL_COLUMNS);
    }
    public void setexactcolumns(int tmaxstokperfolder)
    {
     //TODO remove columns corectly
        curentstokperfolder=tmaxstokperfolder;
     MyTableOperations.creartable(artfoldertable);
     
     TableColumn col;
     for(int i=0;i<maxstokperfolder;i++)
     {
         if(i>=curentstokperfolder)
         {
             int idx=artfoldertable.getColumnModel().getColumnIndex("ID_"+(i+1));
              col = artfoldertable.getColumnModel().getColumn(idx);
             artfoldertable.removeColumn(col);
             idx=artfoldertable.getColumnModel().getColumnIndex("SYMBOL_"+(i+1));
              col = artfoldertable.getColumnModel().getColumn(idx);
             artfoldertable.removeColumn(col);
             idx=artfoldertable.getColumnModel().getColumnIndex("Risk_"+(i+1));
              col = artfoldertable.getColumnModel().getColumn(idx);
             artfoldertable.removeColumn(col);
             idx=artfoldertable.getColumnModel().getColumnIndex("EE_"+(i+1));
              col = artfoldertable.getColumnModel().getColumn(idx);
             artfoldertable.removeColumn(col);
         }
     }
    }
  
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        artfoldertable = new javax.swing.JTable();
        bclose = new javax.swing.JButton();
        bbuild = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        tamaxstocks = new javax.swing.JTextArea();
        jLabel1 = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        jScrollPane3 = new javax.swing.JScrollPane();
        stocklangtable = new javax.swing.JTable();
        selectall = new javax.swing.JButton();
        selectexact = new javax.swing.JButton();
        precalculate = new javax.swing.JButton();
        jProgressBar1 = new javax.swing.JProgressBar();
        runbuilding = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        jacceptedrisktest = new javax.swing.JTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jPanel1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());
        getContentPane().add(jPanel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 20, 20));

        jScrollPane1.setViewportBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        jScrollPane1.setAutoscrolls(true);

        artfoldertable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null}
            },
            new String [] {
                "FolderID", "FolderRisk", "FolderEarn"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        artfoldertable.setMaximumSize(new java.awt.Dimension(1500, 8000000));
        artfoldertable.setPreferredSize(new java.awt.Dimension(1500, 8000000));
        artfoldertable.setRowHeight(20);
        jScrollPane1.setViewportView(artfoldertable);

        getContentPane().add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 60, 1070, 520));

        bclose.setText("Close");
        bclose.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bcloseActionPerformed(evt);
            }
        });
        getContentPane().add(bclose, new org.netbeans.lib.awtextra.AbsoluteConstraints(1200, 600, -1, -1));

        bbuild.setText("1. Build");
        bbuild.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bbuildActionPerformed(evt);
            }
        });
        getContentPane().add(bbuild, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 590, 100, -1));

        jScrollPane2.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
        jScrollPane2.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_NEVER);
        jScrollPane2.setMaximumSize(new java.awt.Dimension(50, 16));
        jScrollPane2.setPreferredSize(new java.awt.Dimension(50, 16));

        tamaxstocks.setColumns(20);
        tamaxstocks.setFont(new java.awt.Font("Courier New", 0, 10));
        tamaxstocks.setRows(5);
        tamaxstocks.setText("3");
        jScrollPane2.setViewportView(tamaxstocks);

        getContentPane().add(jScrollPane2, new org.netbeans.lib.awtextra.AbsoluteConstraints(180, 590, 30, -1));

        jLabel1.setText("Stocks");
        getContentPane().add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(140, 590, -1, -1));

        jPanel2.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        stocklangtable.setAutoCreateRowSorter(true);
        stocklangtable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "dbID", "Stock", "Use", "RISK", "Ei"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Object.class, java.lang.Object.class, java.lang.Boolean.class, java.lang.Object.class, java.lang.Object.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, true, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        stocklangtable.setMaximumSize(new java.awt.Dimension(100, 200));
        stocklangtable.setPreferredSize(new java.awt.Dimension(100, 15000));
        jScrollPane3.setViewportView(stocklangtable);

        jPanel2.add(jScrollPane3, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 10, 190, 520));

        selectall.setText("Select All");
        selectall.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                selectallActionPerformed(evt);
            }
        });
        jPanel2.add(selectall, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 540, 90, -1));

        selectexact.setText("3. Exact");
        selectexact.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                selectexactActionPerformed(evt);
            }
        });
        jPanel2.add(selectexact, new org.netbeans.lib.awtextra.AbsoluteConstraints(110, 540, 90, -1));

        getContentPane().add(jPanel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(1080, 20, 210, 570));

        precalculate.setText("2. Precalculate");
        precalculate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                precalculateActionPerformed(evt);
            }
        });
        getContentPane().add(precalculate, new org.netbeans.lib.awtextra.AbsoluteConstraints(240, 590, -1, -1));

        jProgressBar1.setOpaque(true);
        getContentPane().add(jProgressBar1, new org.netbeans.lib.awtextra.AbsoluteConstraints(490, 600, 300, -1));

        runbuilding.setText("4. Run");
        runbuilding.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                runbuildingActionPerformed(evt);
            }
        });
        getContentPane().add(runbuilding, new org.netbeans.lib.awtextra.AbsoluteConstraints(360, 590, 110, -1));

        jLabel2.setText("Accepted Risk");
        getContentPane().add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 20, -1, -1));

        jacceptedrisktest.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        jacceptedrisktest.setText("0.33");
        getContentPane().add(jacceptedrisktest, new org.netbeans.lib.awtextra.AbsoluteConstraints(110, 20, 40, -1));

        pack();
    }// </editor-fold>//GEN-END:initComponents

private void bcloseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bcloseActionPerformed
this.dispose();
if(this.plink!=null)this.plink.afbuilder=null;
}//GEN-LAST:event_bcloseActionPerformed

private void bbuildActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bbuildActionPerformed

setexactcolumns(Integer.parseInt(this.tamaxstocks.getText()));
 initselectstoktable();
 tamaxstocks.setEditable(false);
 bbuild.setEnabled(false);
}//GEN-LAST:event_bbuildActionPerformed

private void selectallActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_selectallActionPerformed
  if(selectall.getText().equalsIgnoreCase("Select All"))
  {
  checkuncheckselecttable(true);
  selectall.setText("Unselect All");
  }else
  {
    checkuncheckselecttable(false);
  selectall.setText("Select All");
  }
}//GEN-LAST:event_selectallActionPerformed

private void precalculateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_precalculateActionPerformed
        //here create thread
    runprecalculations rrrr=new runprecalculations();
        
}//GEN-LAST:event_precalculateActionPerformed
private void updatetheselecttable()
{
   TRS RS=new TRS(BursaAnalizer_Frame.getConnectToDB(BursaAnalizer_Frame.DBID_DATA).con);                     
   DefaultTableModel model = (DefaultTableModel)stocklangtable.getModel();
  int s= model.getRowCount();
  for(int i=0;i<s;i++)
  {
            try {
                int id = ((Integer) model.getValueAt(i, 0)).intValue();
                String sql = "SELECT MFRISK,MFEXPE from [MENAYA_BASE]";
                sql += " WHERE [MENAYA_ID]=" + id;
                RS.execSQL(sql);
                if (RS.rs.next()) {
                    Float r = new Float(RS.rs.getFloat("MFRISK"));
                    Float ei = new Float(RS.rs.getFloat("MFEXPE"));
                    model.setValueAt(r, i, 3);
                    model.setValueAt(ei, i, 4);
                }
            } catch (SQLException ex) {
                Logger.getLogger(BuildFolderFrame.class.getName()).log(Level.SEVERE, null, ex);
            }
  }
}
java.util.List language=new java.util.ArrayList();
private void firstgetlanguage()
{
  language=new java.util.ArrayList();
  DefaultTableModel model = (DefaultTableModel)stocklangtable.getModel();
  int s= model.getRowCount();
  for(int i=0;i<s;i++)
  {
                boolean en=(Boolean)model.getValueAt( i, 2);//selected
                 if(en)
                 {
                Float r = (Float) model.getValueAt(i, 3);
                 Float ei = (Float) model.getValueAt(i, 4);
                 int id=(Integer)model.getValueAt( i, 0);
                 String sym=(String)model.getValueAt( i, 1);
                 Object ob[]=new Object[]{id,sym,r,ei};
                 language.add(ob);
                 }
  }
}
private void selectexactActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_selectexactActionPerformed
DefaultTableModel model = (DefaultTableModel)stocklangtable.getModel();
  int s= model.getRowCount();
  for(int i=0;i<s;i++)
  {
                Float r = (Float) model.getValueAt(i, 3);
                 Float ei = (Float) model.getValueAt(i, 4);
                 if(r<0||r>1||ei==1000000.0f)model.setValueAt(false, i, 2);
                 else model.setValueAt(true, i, 2);
  }
}//GEN-LAST:event_selectexactActionPerformed

private void runbuildingActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_runbuildingActionPerformed
  runbuildingmf rr=new runbuildingmf();

}//GEN-LAST:event_runbuildingActionPerformed

     public class runbuildingmf extends ThreadBasic
     {
        public runbuildingmf()
        {
           super("runbuildingmf");
         this.dorun();
        }
         public void run()
         {
             DefaultTableModel model = (DefaultTableModel)artfoldertable.getModel();
             float locjacceptedrisktest=Float.parseFloat(jacceptedrisktest.getText());
             runbuilding.setEnabled(false);
             firstgetlanguage();
             
              NSequenceGenerator a=new NSequenceGenerator(language.size(),curentstokperfolder);
              
              int maxc=(int) a.trymax();
              Dimension preferredSize=artfoldertable.getPreferredSize();
            preferredSize.height=20*maxc+50;
             artfoldertable.setPreferredSize(preferredSize);
              int i=0;
              System.out.println("Total exact permutations "+maxc);
              jProgressBar1.setMaximum(maxc);
              jProgressBar1.setString("Building alternative folders");
              jProgressBar1.setStringPainted(true);
              jProgressBar1.setValue(0);
              do
              {
                  int ret[]=a.get();
                  Object ob[]=new Object[3+ret.length*4];
                  ob[0]=i;
                  ob[1]=0;
                  ob[2]=0;
                  float mixpal=0;
                  float sum=0;
                  float sum1=0;
                  for(int j=0,k=3;j<ret.length;j++,k+=4)
                  {
                      Object to[]=(Object[])language.get(ret[j]);
                       ob[k]=to[0];
                       ob[k+1]=to[1];
                       ob[k+2]=to[2];
                       ob[k+3]=to[3];
                       mixpal+=((Float)to[2])*((Float)to[3]);
                       sum+=((Float)to[2]);
                       sum1+=((Float)to[3]);
                               //TODO important
                  }
                  ob[2]=mixpal/sum;
                  ob[1]=mixpal/sum1;
                  MyTableOperations.adddata(artfoldertable,ob);
                  preferredSize=artfoldertable.getPreferredSize();
                  maxc=artfoldertable.getRowCount();
                  preferredSize.height=20*maxc+50;
                  artfoldertable.setPreferredSize(preferredSize);
               jProgressBar1.setValue(i++);
              }while(a.getnext());
             dostop();
            
             jProgressBar1.setStringPainted(false);
             jProgressBar1.setString(null);
             System.out.println("Total permutations created "+artfoldertable.getRowCount());
            rundotop rdt=new rundotop(locjacceptedrisktest);
         }
     };

     public class rundotop extends ThreadBasic
     {
         float maxacceptedrisk=0.33f;
        public rundotop(float tmaxacceptedrisk)
        {
           super("rundotop");
           maxacceptedrisk=          tmaxacceptedrisk;
         this.dorun();
        }
       
         public void run()
         {
              int maxc=artfoldertable.getRowCount();
              int ii=0;
              System.out.println("Total permutations "+maxc);
              jProgressBar1.setMaximum(maxc);
              jProgressBar1.setString("Checking &&accepting...");
              jProgressBar1.setStringPainted(true);
              jProgressBar1.setValue(0);
              float minReard,maxReard,tv1,tv2;
      DefaultTableModel model = (DefaultTableModel)artfoldertable.getModel();
        maxReard=0.0f;
        minReard=10000;
       for(int i=0;i<model.getRowCount();i++)
       {
        tv1=(Float)model.getValueAt(i, 1);
        tv2=(Float)model.getValueAt(i, 2);
        if(tv1<=maxacceptedrisk &&tv2>=maxReard)
        {
        maxReard=(Float)model.getValueAt(i, 2);
        }
        if(tv1<=0.33 &&tv2<=minReard)
        {
        minReard=(Float)model.getValueAt(i, 2);
        }
       }
        System.out.println(" minRisk:"+0.33+"  maxReard:"+maxReard+"  minReard:"+minReard);
         for(int i=0;i<model.getRowCount();i++)
       {
        tv1=(Float)model.getValueAt(i, 1);
        tv2=(Float)model.getValueAt(i, 2);
        if(tv1>=0.33&&tv2<maxReard-(minReard)/2.0)
        {
        model.removeRow(i);
        i=0;
        }
            model.setValueAt(i+1, i, 0);
             maxc=artfoldertable.getRowCount();
              Dimension preferredSize=artfoldertable.getPreferredSize();
              preferredSize.height=20*maxc+50;
             artfoldertable.setPreferredSize(preferredSize);
               jProgressBar1.setValue(ii++);
       }
             this.dostop();
             jProgressBar1.setStringPainted(false);
             jProgressBar1.setString(null);
            
            System.out.println("Total permutations created  after elimination: "+maxc);
             runbuilding.setEnabled(true);
         }
     };
     public class runprecalculations extends ThreadBasic
     {
        public runprecalculations()
        {
           super("runbuildingmf");
         dorun();
        }
         public void run()
         {
             precalculate.setEnabled(false);
             StockListNB sli = BursaAnalizer_Frame.getStoksListInstance();
        java.util.List slist=sli.sltp.slt.atd;
        jProgressBar1.setMaximum(slist.size());
        jProgressBar1.setValue(0);
        jProgressBar1.setString("Recreating R/E ");
              jProgressBar1.setStringPainted(true);
        for(int i=0;i<slist.size();i++)
        {
            jProgressBar1.setValue(i);
          TDoc  doc=(TDoc)slist.get(i);
          int id=Integer.parseInt(doc.o[0].toString());//id
          String simb=doc.o[2].toString();
          boolean upd=Boolean.parseBoolean(doc.o[6].toString());
          java.util.List atd                = new ArrayList();
          GenericTableLoaders.loadTradeDataTableToOut(7, id, atd);
          MarkovitchFolderModel m=new MarkovitchFolderModel(7,"ONCLOSE");
           m.run(atd);
           double         datamf[]=m.getMFM();
                   String sqlstr_begin_upd="UPDATE MENAYA_BASE SET  ";
           if(datamf!=null)
           {
             if(Double.isNaN(datamf[0]))datamf[0]=1000000.0;
             if(Double.isNaN(datamf[2]))datamf[2]=1000000.0;
              //this.mrtl.setText(String.format("%1$.3f", datamf[0]));//risk
             //this.EReal.setText(String.format("%1$.3f", datamf[1]));
             //this.Ei.setText(String.format("%1$.3f", datamf[2]));//expected earn
                     sqlstr_begin_upd+=" MFRISK="+datamf[0];
                     sqlstr_begin_upd+=", MFEXPE="+datamf[2];
           }        
           else
           {
                    sqlstr_begin_upd+=" MFRISK="+1000000.0;
                     sqlstr_begin_upd+=", MFEXPE="+1000000.0;
           }
                   sqlstr_begin_upd+=" WHERE [MENAYA_ID]="+id;
                     TRS RS=new TRS(BursaAnalizer_Frame.getConnectToDB(BursaAnalizer_Frame.DBID_DATA).con);
                      RS.execSQL(sqlstr_begin_upd);     
        }
             updatetheselecttable();
             this.dostop();
             precalculate.setEnabled(true);
             jProgressBar1.setStringPainted(false);
             jProgressBar1.setString(null);
         }
     };
    /**
    * @param args the command line arguments
    */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new BuildFolderFrame(null).setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTable artfoldertable;
    private javax.swing.JButton bbuild;
    private javax.swing.JButton bclose;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JProgressBar jProgressBar1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JTextField jacceptedrisktest;
    private javax.swing.JButton precalculate;
    private javax.swing.JButton runbuilding;
    private javax.swing.JButton selectall;
    private javax.swing.JButton selectexact;
    private javax.swing.JTable stocklangtable;
    private javax.swing.JTextArea tamaxstocks;
    // End of variables declaration//GEN-END:variables

}
