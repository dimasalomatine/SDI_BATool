
import CDate.CDate;
import DBCONNECT.TRS;
import Utils.LoggerNB;
import Utils.TDoc;

/*
 * simulation.java
 *
 * Created on 29 נובמבר 2008, 18:18
 */
import java.sql.*;
import java.util.ArrayList;



/**
 *
 * @author  Dmitry
 */
public class simulation extends javax.swing.JFrame {

    java.util.List atd                = new ArrayList();
    int folder;
    /** Creates new form simulation */
    public simulation(int folder) {
        initComponents();
        this.folder=folder;
        this.setVisible(true);
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        simulate = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();
        fromdate = new CalendarForms.DateButton();
        jLabel1 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        simulate.setText("simulate");
        simulate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                simulateActionPerformed(evt);
            }
        });

        jTextArea1.setColumns(20);
        jTextArea1.setRows(5);
        jScrollPane1.setViewportView(jTextArea1);

        jLabel1.setText("Start from:");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel1Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 693, Short.MAX_VALUE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addContainerGap(632, Short.MAX_VALUE)
                        .addComponent(simulate))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel1Layout.createSequentialGroup()
                        .addGap(111, 111, 111)
                        .addComponent(jLabel1)
                        .addGap(31, 31, 31)
                        .addComponent(fromdate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(fromdate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 256, Short.MAX_VALUE)
                .addGap(18, 18, 18)
                .addComponent(simulate)
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

private void simulateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_simulateActionPerformed
 initfoldersim(folder);
}//GEN-LAST:event_simulateActionPerformed

    /**
    * @param args the command line arguments
    */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new simulation(0).setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private CalendarForms.DateButton fromdate;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextArea jTextArea1;
    private javax.swing.JButton simulate;
    // End of variables declaration//GEN-END:variables

    private void initfoldersim(int folder) {
        if (folder == 0) {
            this.atd.clear();
            this.jTextArea1.setText("");
            return;
        }
this.atd.clear();
            this.jTextArea1.setText("");
        Connection con = BursaAnalizer_Frame.getConnectToDB(BursaAnalizer_Frame.DBID_USER).con;

        
        TDoc t = null;
        TRS  RS = new TRS(con);

        try {
          
            RS.execSQL("SELECT [DEAL].menayaid,[DEAL].dealid,[operations].QTTY,[operations].PRICE,[operations].DATE ,[optypes_t].val  FROM DEAL  , operations,optypes_t   " +
                    " WHERE [DEAL].dealid=[operations].dealid and   [optypes_t].op_type_id=[operations].op_type and  [DEAL].FOLDERID=" + folder);

            while (RS.rs.next()) {
                t = new TDoc (14);
                t.o[0] = new Integer (RS.rs.getInt(1));//menayaid
                t.o[1] = new Integer(RS.rs.getInt(2));//dealid
               // t.o[2] = menayaname.getVc1byVc2(ti.toString());
                t.o[2]=new Float(RS.rs.getFloat(3));//qtty
                t.o[3]=new Float(RS.rs.getFloat(4));//price
                
                t.o[4]=RS.rs.getDate(5);//date
               t.o[5]=new String(RS.rs.getString(6));//acttypename
               
               t.o[6]=0;//rsi
                t.o[7]=0;//mac
                t.o[8]=0;//
                t.o[9]=0;//
                t.o[10]=0;//
                t.o[11]=0;//
                   t.o[12]=0;//
                      t.o[13]=0;//
                CDate d=new CDate(fromdate.getDate());
                runtestone(t,((Integer)t.o[0]).intValue(),d);
                atd.add(t);
                this.jTextArea1.append(t.o[0]+" "+t.o[1]+" "+t.o[2]+" "+t.o[3]+" "+t.o[4]+" "+t.o[5]+" "+t.o[6]+" "+t.o[7]+" "+t.o[8]+" "+t.o[9]+" "+t.o[10]+" "+t.o[11]+" "+t.o[12]+" "+t.o[13]+"\n");
            }
        }  catch (SQLException e) {
            if (LoggerNB.debuging){                System.out.println("Error20: " + e);}
        }   finally {
            RS.close();
            RS = null;
        }

       
    }
    
public void runtestone(TDoc               lastdetected,int menayaid,CDate d) {

        System.out.println("Testing "+menayaid+" date:"+d.toStringDelimited('-'));
        MoneyDetector mdp = BursaAnalizer_Frame.getMoneyDetectorInstance();
        StockListNB sli              =
            BursaAnalizer_Frame.getStoksListInstance();
        boolean   usersi1          = mdp.tapsetings.findByRSI1.isSelected();
        float     rsi1min          =
            Float.parseFloat(mdp.tapsetings.rsi1minval.getText());
        float     rsi1max          =
            Float.parseFloat(mdp.tapsetings.rsi1maxval.getText());
        int       rsi1period       = mdp.tapsetings.rsicb1s.getValue();
        boolean   usersi2          = mdp.tapsetings.findByRSI2.isSelected();
        float     rsi2min          =
            Float.parseFloat(mdp.tapsetings.rsi2minval.getText());
        float     rsi2max          =
            Float.parseFloat(mdp.tapsetings.rsi2maxval.getText());
        int       rsi2period       = mdp.tapsetings.rsicb2s.getValue();
        double    dataRSI[]        = null;
        boolean   useclosechup     = mdp.tapsetings.usecdchup.isSelected();
        int       closechupperiod  = mdp.tapsetings.cdchsup.getValue();
        float     closechuppercent =
            Float.parseFloat(mdp.tapsetings.closechpup.getText());
        boolean useclosechdown     = mdp.tapsetings.usecdchdown.isSelected();
        int     closechdownperiod  = mdp.tapsetings.cdchsdown.getValue();
        float   closechdownpercent =
            Float.parseFloat(mdp.tapsetings.closechpdown.getText());
        boolean usevolchup     = mdp.tapsetings.usevolchup.isSelected();
        int     volchupperiod  = mdp.tapsetings.volchsup.getValue();
        float   volchuppercent =
            Float.parseFloat(mdp.tapsetings.volumechpup.getText());
        boolean usevolchdown     = mdp.tapsetings.usevolchdown.isSelected();
        int     volchdownperiod  = mdp.tapsetings.volchsdown.getValue();
        float   volchdownpercent =
            Float.parseFloat(mdp.tapsetings.volumechpdown.getText());
        boolean userrrtest=mdp.tapadvsetings.RRTest.isSelected();
        float rrrmaxvalue=Float.parseFloat(mdp.tapadvsetings.RRVal.getText());
         int     rrrperiod = mdp.tapadvsetings.rrrperiod.getValue();
          float rrrbelt=Float.parseFloat(mdp.tapadvsetings.rrrbelt.getText());

          String menayaSymbol =""+menayaid;
          for(int i=0;i<sli.sltp.slt.atd.size();i++)
          {
              String tstr=(String) ((TDoc) sli.sltp.slt.atd.get(i)).o[2];
              int ys=(Integer) ((TDoc) sli.sltp.slt.atd.get(i)).o[0];
              if(ys==menayaid)menayaSymbol=tstr;
          }

        String  eventmsg     = "";
        
        Float   plast, pfirst;
        float   pdiff = 0.0f;

       
        DetectorTestsSimulator dto = new DetectorTestsSimulator(lastdetected);

            // load data
            
            java.util.List ttradedata = new ArrayList();

            GenericTableLoaders.loadTradeDataTableToOut(7, menayaid,
                    ttradedata);
               System.out.println("Load data");
            for (int i=0;i<ttradedata.size();i++)
            {
                TDoc t=(TDoc)ttradedata.get(i);
                //System.out.println(t.o[0].toString());
                CDate td=new CDate(t.o[0].toString());
                if(td.less(d))
                {
                    ttradedata.remove(t);
                 
                i=0;
                }
            }
          
            // calculate diff %
            GenericTableLoaders.calculateDiffARtoPreviousA(ttradedata, 4,6,true);

            // here call or do your function tests
            if (useclosechup) {
                dto.testCloseChangeUp(ttradedata, menayaid,menayaSymbol,
                                      closechupperiod, closechuppercent);
            }

            if (useclosechdown) {
                dto.testCloseChangeDown(ttradedata, menayaid,menayaSymbol,
                                        closechdownperiod, closechdownpercent);
            }

            if (usevolchup) {
                dto.testVolumeChangeUp(ttradedata, menayaid,menayaSymbol,
                                       volchupperiod, volchuppercent);
            }

            if (usevolchdown) {
                dto.testVolumeChangeDown(ttradedata, menayaid,menayaSymbol,
                                         volchupperiod, volchuppercent);
            }

            if (usersi1) {
                dto.testRSI_I(ttradedata, menayaid, menayaSymbol,rsi1period,
                              rsi1min, rsi1max);
            }

            if (usersi2) {
                dto.testRSI_II(ttradedata, menayaid,menayaSymbol, rsi2period,
                               rsi2min, rsi2max);
            }
            if(userrrtest)
            {
                dto.RRRTest(ttradedata,  menayaid,menayaSymbol, rrrperiod, rrrmaxvalue,rrrbelt,1000.0f );
            }

            
        }

    
}
