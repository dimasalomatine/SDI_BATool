/*
 * Test_2H_2_GUI_NBF.java
 *
 * Created on December 1, 2006, 8:18 PM
 */

package NN2HLBP;

import DBCONNECT.*;
import LocalUtils.ThreadBasic;
import LocalUtils.createXls;
import Utils.*;
import java.awt.*;
import javax.swing.*;
import javax.swing.border.TitledBorder;

/**
 *
 * @author  Dmitry
 */
public class Test_2H_2_GUI_NBF extends javax.swing.JFrame {
    int curentmid=0;
    String curentsymbol="";
    int uid=0;//curent user id
     java.util.List workOnData = null;
     java.util.List pdataTrade=null;//external data points list 
     boolean runingasternal=false;
     DataBaseConnector dbc;
    /** Creates new form Test_2H_2_GUI_NBF */
    public Test_2H_2_GUI_NBF(boolean truningasternal,DataBaseConnector tdbc,int uid) {
        this.runingasternal=truningasternal;
        this.dbc=tdbc;
        this.uid=uid;
        initComponents();
   
        nnc=new Test_2H_2(this.dbc,Integer.parseInt(hl1size.getText()),Integer.parseInt(hl2size.getText()),Integer.parseInt(numinputs.getText()),ispercentaged.isSelected());
        initInputSets();
        setVisible(true);
    }
    
    public  void setdbc(DataBaseConnector tdbc)
    {
     this.dbc=tdbc;
    }
    public MySimleInputByCombo getcon()
    {
        DataBaseConnector    base=null;
        MySimleInputByCombo retcb=null;
     if(runingasternal)
     {
         base=new Msdb_connect("C:\\SDI_BATool\\data\\base.mdb");
        ((Msdb_connect)base).connect();
        retcb=new MySimleInputByCombo(null,
	 								base.con,
	 								"MENAYA_BASE",
	 								"SYMBOL",
	 								"MENAYA_ID");
        base.disConnect();
     }else
     {
            base=dbc;
        retcb=new MySimleInputByCombo(null,
	 								base.con,
	 								"MENAYA_BASE",
	 								"SYMBOL",
	 								"MENAYA_ID",
                                                                        "\nWHERE [update]=1");

     }
        return retcb;
    }

    
    public void setDatalist2out(java.util.List dataTrade) 
    {
        pdataTrade=dataTrade;
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        cbstock = new javax.swing.JComboBox();
        jLabel1 = new javax.swing.JLabel();
        close = new javax.swing.JButton();
        train = new javax.swing.JButton();
        save = new javax.swing.JButton();
        reset = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jPanel_IOS = new javax.swing.JPanel();
        jPanel4 = new javax.swing.JPanel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        pemoki = new javax.swing.JLabel();
        pevoki = new javax.swing.JLabel();
        pesdoki = new javax.swing.JLabel();
        pecoki = new javax.swing.JLabel();
        jCheckBox1 = new javax.swing.JCheckBox();
        jCheckBox2 = new javax.swing.JCheckBox();
        jCheckBox3 = new javax.swing.JCheckBox();
        Load = new javax.swing.JButton();
        ispercentaged = new javax.swing.JCheckBox();
        setknown = new javax.swing.JButton();
        save_browse = new javax.swing.JButton();
        load_browse = new javax.swing.JButton();
        predict = new javax.swing.JButton();
        runperformancer = new javax.swing.JButton();
        viewmap = new javax.swing.JButton();
        output = new myCForms.DataMinimalNNSet();
        viewAImap = new javax.swing.JButton();
        jButtonset2datalistback = new javax.swing.JButton();
        jProgressBar1 = new javax.swing.JProgressBar();
        performallnnc = new javax.swing.JButton();
        jLabel11 = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        realnuminputs = new javax.swing.JTextArea();
        realnumoutputs = new javax.swing.JTextArea();
        jLabel3 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        numinputs = new javax.swing.JTextArea();
        jPanel3 = new javax.swing.JPanel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        hl1size = new javax.swing.JTextArea();
        hl2size = new javax.swing.JTextArea();
        runonfolder = new javax.swing.JButton();
        minErrAcceptedOnNIter = new javax.swing.JTextField();
        jLabel12 = new javax.swing.JLabel();
        saveedtfonly = new javax.swing.JCheckBox();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setResizable(false);

        jPanel1.setMaximumSize(new java.awt.Dimension(700, 600));
        jPanel1.setMinimumSize(new java.awt.Dimension(50, 50));
        jPanel1.setPreferredSize(new java.awt.Dimension(800, 600));
        jPanel1.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                jPanel1KeyTyped(evt);
            }
        });

        cbstock.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        cbstock=getcon();

        jLabel1.setText("Stock :");

        close.setText("Close");
        close.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                closeActionPerformed(evt);
            }
        });

        train.setText("Train");
        train.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                trainActionPerformed(evt);
            }
        });

        save.setText("Save");
        save.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveActionPerformed(evt);
            }
        });

        reset.setText("Reset");
        reset.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                resetActionPerformed(evt);
            }
        });

        jPanel_IOS.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 1, true));
        jPanel_IOS.setAutoscrolls(true);
        jPanel_IOS.setMaximumSize(new java.awt.Dimension(300, 400));
        jPanel_IOS.setMinimumSize(new java.awt.Dimension(300, 400));

        org.jdesktop.layout.GroupLayout jPanel_IOSLayout = new org.jdesktop.layout.GroupLayout(jPanel_IOS);
        jPanel_IOS.setLayout(jPanel_IOSLayout);
        jPanel_IOSLayout.setHorizontalGroup(
            jPanel_IOSLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(0, 540, Short.MAX_VALUE)
        );
        jPanel_IOSLayout.setVerticalGroup(
            jPanel_IOSLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(0, 200, Short.MAX_VALUE)
        );

        jScrollPane1.setViewportView(jPanel_IOS);

        jPanel4.setBorder(javax.swing.BorderFactory.createTitledBorder("AI State-predict error"));

        jLabel6.setText("Mean on known input ");

        jLabel7.setText("Variance on known input ");

        jLabel9.setText("Std.Dev. on known input ");

        jLabel10.setText("Corelation on known input ");

        pemoki.setText("0.0");

        pevoki.setText("0.0");

        pesdoki.setText("0.0");

        pecoki.setText("0.0");

        jCheckBox1.setSelected(true);
        jCheckBox1.setText("use");

        jCheckBox2.setText("use");

        jCheckBox3.setText("use");

        org.jdesktop.layout.GroupLayout jPanel4Layout = new org.jdesktop.layout.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .add(jPanel4Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(jLabel6)
                    .add(jLabel7)
                    .add(jLabel9)
                    .add(jLabel10))
                .add(94, 94, 94)
                .add(jPanel4Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(pecoki)
                    .add(pesdoki)
                    .add(pevoki)
                    .add(pemoki))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, 178, Short.MAX_VALUE)
                .add(jPanel4Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)
                    .add(jCheckBox1)
                    .add(jCheckBox2)
                    .add(jCheckBox3))
                .addContainerGap())
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .add(jPanel4Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jLabel6)
                    .add(pemoki)
                    .add(jCheckBox1))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jPanel4Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(jPanel4Layout.createSequentialGroup()
                        .add(jPanel4Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                            .add(jLabel7)
                            .add(pevoki))
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(jPanel4Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                            .add(jLabel9)
                            .add(pesdoki))
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                        .add(jPanel4Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)
                            .add(jLabel10)
                            .add(pecoki)))
                    .add(jPanel4Layout.createSequentialGroup()
                        .add(jCheckBox2)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                        .add(jCheckBox3)))
                .addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        Load.setText("Load");
        Load.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                LoadActionPerformed(evt);
            }
        });

        ispercentaged.setSelected(true);
        ispercentaged.setText("use percents");
        ispercentaged.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
        ispercentaged.setMargin(new java.awt.Insets(0, 0, 0, 0));

        setknown.setText("<- Set known");
        setknown.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                setknownActionPerformed(evt);
            }
        });

        save_browse.setText("...");
        save_browse.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                save_browseActionPerformed(evt);
            }
        });

        load_browse.setText("...");
        load_browse.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                load_browseActionPerformed(evt);
            }
        });

        predict.setText("Predict it");
        predict.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                predictActionPerformed(evt);
            }
        });

        runperformancer.setText("Run performancer");
        runperformancer.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                runperformancerActionPerformed(evt);
            }
        });

        viewmap.setText("view Data Map");
        viewmap.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                viewmapActionPerformed(evt);
            }
        });

        output.setMaximumSize(new java.awt.Dimension(300, 50));
        output.setMinimumSize(new java.awt.Dimension(300, 50));

        viewAImap.setText("view AI Map");
        viewAImap.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                viewAImapActionPerformed(evt);
            }
        });

        jButtonset2datalistback.setText("Set To Data List");
        jButtonset2datalistback.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonset2datalistbackActionPerformed(evt);
            }
        });

        performallnnc.setText(" Performance all NNC");
        performallnnc.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                performallnncActionPerformed(evt);
            }
        });

        jLabel11.setFont(new java.awt.Font("Arial", 3, 14));
        jLabel11.setForeground(new java.awt.Color(0, 0, 204));
        jLabel11.setText("Elina");

        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder("Net Settings"));

        jLabel2.setText("Number of In Neurons:");

        realnuminputs.setColumns(20);
        realnuminputs.setEditable(false);
        realnuminputs.setFont(new java.awt.Font("Courier", 1, 12));
        realnuminputs.setRows(1);
        realnuminputs.setText("49");

        realnumoutputs.setColumns(20);
        realnumoutputs.setEditable(false);
        realnumoutputs.setFont(new java.awt.Font("Courier", 1, 12));
        realnumoutputs.setRows(1);
        realnumoutputs.setText("5");

        jLabel3.setText("Number of Out Neurons:");

        jLabel8.setText("Input days :");

        numinputs.setColumns(20);
        numinputs.setFont(new java.awt.Font("Courier", 1, 12));
        numinputs.setRows(1);
        numinputs.setText("7");
        numinputs.setInputVerifier(new MySympleValVerifier(MySympleValVerifier.INT,1,10));
        numinputs.addInputMethodListener(new java.awt.event.InputMethodListener() {
            public void caretPositionChanged(java.awt.event.InputMethodEvent evt) {
            }
            public void inputMethodTextChanged(java.awt.event.InputMethodEvent evt) {
                numinputsInputMethodTextChanged(evt);
            }
        });
        numinputs.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                numinputsKeyPressed(evt);
            }
        });

        org.jdesktop.layout.GroupLayout jPanel2Layout = new org.jdesktop.layout.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .add(jPanel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(jLabel3)
                    .add(jLabel2)
                    .add(jLabel8))
                .add(13, 13, 13)
                .add(jPanel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(jPanel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING, false)
                        .add(org.jdesktop.layout.GroupLayout.TRAILING, realnuminputs, 0, 0, Short.MAX_VALUE)
                        .add(org.jdesktop.layout.GroupLayout.TRAILING, realnumoutputs, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 25, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                    .add(numinputs, 0, 0, Short.MAX_VALUE))
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel2Layout.createSequentialGroup()
                .add(jPanel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)
                    .add(numinputs, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 22, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(jLabel8))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jPanel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)
                    .add(realnuminputs, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 22, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(jLabel2))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jPanel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)
                    .add(jLabel3)
                    .add(realnumoutputs, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 23, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanel3.setBorder(javax.swing.BorderFactory.createTitledBorder("Hiden Layers"));

        jLabel4.setText("hl1");

        jLabel5.setText("hl2");

        hl1size.setColumns(20);
        hl1size.setFont(new java.awt.Font("Courier", 1, 12));
        hl1size.setRows(5);
        hl1size.setText("60");
        hl1size.setInputVerifier(new MySympleValVerifier(MySympleValVerifier.INT,5,100));

        hl2size.setColumns(20);
        hl2size.setFont(new java.awt.Font("Courier", 1, 12));
        hl2size.setRows(5);
        hl2size.setText("70");
        hl2size.setInputVerifier(new MySympleValVerifier(MySympleValVerifier.INT,5,100));

        org.jdesktop.layout.GroupLayout jPanel3Layout = new org.jdesktop.layout.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel3Layout.createSequentialGroup()
                .add(20, 20, 20)
                .add(jPanel3Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(jLabel5)
                    .add(jLabel4))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jPanel3Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(hl1size, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 19, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(hl2size, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 19, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(163, Short.MAX_VALUE))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel3Layout.createSequentialGroup()
                .add(25, 25, 25)
                .add(jPanel3Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jLabel4)
                    .add(hl1size, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 22, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .add(7, 7, 7)
                .add(jPanel3Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)
                    .add(jLabel5)
                    .add(hl2size, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 22, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(14, Short.MAX_VALUE))
        );

        runonfolder.setText("Run on Folder");
        runonfolder.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                runonfolderActionPerformed(evt);
            }
        });

        minErrAcceptedOnNIter.setText("0.2");

        jLabel12.setText("minErrAcceptedOnNIter");

        saveedtfonly.setText("Save EDTF only");

        org.jdesktop.layout.GroupLayout jPanel1Layout = new org.jdesktop.layout.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel1Layout.createSequentialGroup()
                .add(41, 41, 41)
                .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(jPanel1Layout.createSequentialGroup()
                        .add(jPanel4, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED))
                    .add(org.jdesktop.layout.GroupLayout.TRAILING, jPanel1Layout.createSequentialGroup()
                        .add(10, 10, 10)
                        .add(jLabel11)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, 130, Short.MAX_VALUE)
                        .add(jLabel1)
                        .add(25, 25, 25)
                        .add(cbstock, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 143, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .add(112, 112, 112))
                    .add(org.jdesktop.layout.GroupLayout.TRAILING, jPanel1Layout.createSequentialGroup()
                        .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)
                            .add(org.jdesktop.layout.GroupLayout.LEADING, output, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 468, Short.MAX_VALUE)
                            .add(jScrollPane1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 468, Short.MAX_VALUE))
                        .add(19, 19, 19))
                    .add(jPanel1Layout.createSequentialGroup()
                        .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING, false)
                            .add(jPanel1Layout.createSequentialGroup()
                                .add(jLabel12)
                                .add(18, 18, 18)
                                .add(minErrAcceptedOnNIter))
                            .add(org.jdesktop.layout.GroupLayout.LEADING, jPanel2, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(jPanel3, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)))
                .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(jPanel1Layout.createSequentialGroup()
                        .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)
                            .add(jPanel1Layout.createSequentialGroup()
                                .add(69, 69, 69)
                                .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                                    .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                                        .add(jPanel1Layout.createSequentialGroup()
                                            .add(reset, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 77, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                                            .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                                            .add(train, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 104, Short.MAX_VALUE))
                                        .add(jPanel1Layout.createSequentialGroup()
                                            .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING, false)
                                                .add(org.jdesktop.layout.GroupLayout.LEADING, Load, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                .add(org.jdesktop.layout.GroupLayout.LEADING, save, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 73, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                                            .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                                            .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                                                .add(load_browse, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 57, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                                                .add(save_browse, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 57, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)))
                                        .add(org.jdesktop.layout.GroupLayout.TRAILING, predict)
                                        .add(runperformancer, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 187, Short.MAX_VALUE)
                                        .add(org.jdesktop.layout.GroupLayout.TRAILING, setknown)
                                        .add(org.jdesktop.layout.GroupLayout.TRAILING, viewmap, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 187, Short.MAX_VALUE)
                                        .add(jProgressBar1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 187, Short.MAX_VALUE)
                                        .add(org.jdesktop.layout.GroupLayout.TRAILING, performallnnc)
                                        .add(saveedtfonly, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 187, Short.MAX_VALUE))
                                    .add(org.jdesktop.layout.GroupLayout.TRAILING, jPanel1Layout.createSequentialGroup()
                                        .add(close)
                                        .add(19, 19, 19))))
                            .add(jPanel1Layout.createSequentialGroup()
                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                                .add(viewAImap, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 140, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                            .add(jPanel1Layout.createSequentialGroup()
                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                                .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                                    .add(ispercentaged)
                                    .add(runonfolder))))
                        .add(66, 66, 66))
                    .add(org.jdesktop.layout.GroupLayout.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(jButtonset2datalistback)
                        .add(78, 78, 78))))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING, false)
                    .add(jPanel1Layout.createSequentialGroup()
                        .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                            .add(cbstock, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                            .add(jLabel1)
                            .add(jLabel11))
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(output, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .add(jPanel1Layout.createSequentialGroup()
                        .add(predict)
                        .add(28, 28, 28)
                        .add(setknown)
                        .add(21, 21, 21)
                        .add(viewmap)))
                .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(jPanel1Layout.createSequentialGroup()
                        .add(27, 27, 27)
                        .add(viewAImap)
                        .add(40, 40, 40)
                        .add(runonfolder)
                        .add(35, 35, 35)
                        .add(ispercentaged)
                        .add(32, 32, 32)
                        .add(runperformancer)
                        .add(18, 18, 18)
                        .add(saveedtfonly)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, 56, Short.MAX_VALUE)
                        .add(performallnnc)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                        .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                            .add(reset)
                            .add(train))
                        .add(18, 18, 18)
                        .add(jButtonset2datalistback)
                        .add(12, 12, 12)
                        .add(jProgressBar1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                        .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                            .add(save)
                            .add(save_browse))
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                            .add(Load)
                            .add(load_browse))
                        .add(5, 5, 5)
                        .add(close))
                    .add(jPanel1Layout.createSequentialGroup()
                        .add(18, 18, 18)
                        .add(jScrollPane1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 204, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .add(18, 18, 18)
                        .add(jPanel4, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING, false)
                            .add(jPanel3, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .add(jPanel2, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                        .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                            .add(jLabel12)
                            .add(minErrAcceptedOnNIter, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap())
        );

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .add(jPanel1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 850, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .add(jPanel1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 672, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void viewAImapActionPerformed (java.awt.event.ActionEvent evt)//GEN-FIRST:event_viewAImapActionPerformed
    {//GEN-HEADEREND:event_viewAImapActionPerformed
// TODO add your handling code here:
    }//GEN-LAST:event_viewAImapActionPerformed

    private void jPanel1KeyTyped (java.awt.event.KeyEvent evt)//GEN-FIRST:event_jPanel1KeyTyped
    {//GEN-HEADEREND:event_jPanel1KeyTyped
// TODO add your handling code here:
    }//GEN-LAST:event_jPanel1KeyTyped

    private void numinputsKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_numinputsKeyPressed
int trows=Integer.parseInt(numinputs.getText());
        if(trows>0&&trows<10) {
            this.realnuminputs.setText(""+(trows*7));
        }
    }//GEN-LAST:event_numinputsKeyPressed

    private void viewmapActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_viewmapActionPerformed
    EditNNMap nnmap=new EditNNMap();
    nnmap.setworkdata(workOnData);
    //test
    createXls cx=new createXls();
    createXls.test(null,dbc);
    }//GEN-LAST:event_viewmapActionPerformed

    private void runperformancerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_runperformancerActionPerformed
        nnc.setPerformanceTestSteping(10,10);
        nnc.setminErrAcceptedOnNIter(Double.parseDouble(minErrAcceptedOnNIter.getText()));
        nnc.setusetest(Test_2H_2.MEAN,jCheckBox1.isSelected());
                  nnc.setusetest(Test_2H_2.ABS_SUM,false);
                  nnc.setusetest(Test_2H_2.STD_DEV,jCheckBox3.isSelected());
                  nnc.setusetest(Test_2H_2.VARIANCE,jCheckBox2.isSelected());
                  nnc.setsaveedtfonly(saveedtfonly.isSelected());
        curentmid=Integer.parseInt(((MySimleInputByCombo)cbstock).getVc2bySelected ());
        curentsymbol=((MySimleInputByCombo)cbstock).getVc1bySelected ();
        nnc.performancetest(curentsymbol.trim(),curentmid,Integer.parseInt(numinputs.getText()),ispercentaged.isSelected(),true);
        /*this.pemoki.setText(String.format("%6.3f",Double.toString(nnc.resultbest[Test_2H_2.MEAN])));
        this.pevoki.setText(String.format("%9.4f",Double.toString(nnc.resultbest[Test_2H_2.VARIANCE])));
        this.pesdoki.setText(String.format("%9.4f",Double.toString(nnc.resultbest[Test_2H_2.STD_DEV])));
        this.pecoki.setText(String.format("%9.4f",Double.toString(nnc.getInputDataCorelation())));
        */
          this.pemoki.setText(String.format("%8.5f%%",nnc.resultbest[Test_2H_2.MEAN]));
        this.pevoki.setText(String.format("%10.5fpt",nnc.resultbest[Test_2H_2.VARIANCE]));
        this.pesdoki.setText(String.format("%10.5fpt",nnc.resultbest[Test_2H_2.STD_DEV]));
        this.pecoki.setText(String.format("%10.5fpt",nnc.getInputDataCorelation()));

        this.hl1size.setText(Double.toString(nnc.besti[Test_2H_2.MEAN]));
        this.hl2size.setText(Double.toString(nnc.bestj[Test_2H_2.MEAN]));
    }//GEN-LAST:event_runperformancerActionPerformed

    public class rungenerateallnnc extends ThreadBasic
     {
        DataBaseConnector datac;
        public rungenerateallnnc(DataBaseConnector data)
        {
           super("rungenerateallnnc");
           this.datac=data;
         this.dorun();
        }
         public void run()
         {
                performallnnc.setEnabled(false);
              Object [][]ob=((MySimleInputByCombo)cbstock).getdata();
              int maxc=ob.length;
              System.out.println("Total nnc will be generated "+maxc);
              jProgressBar1.setMaximum(maxc);
              jProgressBar1.setString("Building nnc files");
              jProgressBar1.setStringPainted(true);
              jProgressBar1.setValue(0);
              int tnin=Integer.parseInt(numinputs.getText());
              boolean isp=ispercentaged.isSelected();
              int hl2s=(int) Double.parseDouble(hl2size.getText());
              int hl1s=(int) Double.parseDouble(hl1size.getText());
              for(int k=0;k<maxc&&runing;k++)
              {
                  nnc=new Test_2H_2(datac,hl1s,hl2s,tnin,isp);
                  nnc.setPerformanceTestSteping(10,10);
                  nnc.setminErrAcceptedOnNIter(Double.parseDouble(minErrAcceptedOnNIter.getText()));
                  nnc.setusetest(Test_2H_2.MEAN,true);
                  nnc.setusetest(Test_2H_2.ABS_SUM,false);
                  nnc.setusetest(Test_2H_2.STD_DEV,false);
                  nnc.setusetest(Test_2H_2.VARIANCE,false);
                  setSymbolAndLock(ob[k][0].toString());

                  nnc.setsaveedtfonly(saveedtfonly.isSelected());

                  nnc.performancetest(ob[k][0].toString().trim(),Integer.parseInt(ob[k][1].toString()),tnin,isp,true);
                  if(saveedtfonly.isSelected())
                  {
                       jProgressBar1.setValue(k++);
                  this.dosleep();
                      continue;
                  }
                  //TODO add to menaya_base BestAI
                  System.out.println("BestAI"+nnc.resultbest[Test_2H_2.MEAN]);
                 //  System.out.println("BestAI"+nnc.resultbest[Test_2H_2.ABS_SUM]);
                 //   System.out.println("BestAI"+nnc.resultbest[Test_2H_2.STD_DEV]);
                 //    System.out.println("BestAI"+nnc.resultbest[Test_2H_2.VARIANCE]);
                  clearInputs();
                  initInputSets() ;
                  setknowntodatasets();
                  double [] lastd=predictproc();
                  if(lastd!=null)
                  {
                      String sqlstr="INSERT into predicted()";
                  for(int iii=0;iii<lastd.length;iii++)
                  {
                  System.out.print("predict"+lastd[iii]);

                  }
                  System.out.println("");
                  output.setData(lastd);//and set to dataout
                   //here update in menayabase
                  }
                  jProgressBar1.setValue(k++);
                  this.dosleep();
              }
             this.dostop();
             performallnnc.setEnabled(true);
             jProgressBar1.setStringPainted(false);
             jProgressBar1.setString(null);
         }
     };
     
    private void predictActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_predictActionPerformed
        double [] lastd=predictproc();
        this.output.setData(lastd);//and set to dataout
    }//GEN-LAST:event_predictActionPerformed
    private double[]  predictproc()
    {

         double d[]=null;
         double predicterror=nnc.resultbest[Test_2H_2.MEAN]/100.0;
         
         d=new double[inputsets.length*(inputsets[0].getHidenOnChangeData()).length];
        for (int i=inputsets.length-1,k=0;i>=0;i--)
        {
         double r[]=inputsets[i].getHidenOnChangeData();
         for(int j=0;j<r.length;j++)
         {
           d[k++]=r[j];
         }
        }
     
        double ret[]=nnc.aproximateIt(d); //predict it
         //get the last row in  in datain set
        //actually we need the last trade data
          double  lastd[]=null;
         
          lastd=inputsets[inputsets.length-1].getData();
        
          for(int t=0;t<ret.length&&t<lastd.length;t++)
          {
               System.out.println("Executed  lastd[t]=lastd[t]+(lastd[t]*(ret[t]/100.0));");
           System.out.println("Executed  lastd[t]="+lastd[t]);
           System.out.println("Executed  predicterror="+predicterror);
           System.out.println("Executed  ret[t]/100.0="+ret[t]/100.0);
           System.out.println("Executed  (lastd[t]*((ret[t]/100.0)-predicterror))="+(lastd[t]*((ret[t]/100.0)/*-predicterror*/)));
           lastd[t]=lastd[t]+(lastd[t]*((ret[t]/100.0)/*-predicterror*/));
          System.out.println("Result  lastd[t]="+lastd[t]);
          }
          double tt=lastd[4];
          lastd[4]=lastd[1];
          lastd[1]=tt;
          
        return lastd;

    }
    private void load_browseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_load_browseActionPerformed
       
    MySimpleBrowser sb =
                    new MySimpleBrowser(this,
                                        "Select the AI file", pathtoAIFileaccess, false,
                                        true, new String[] { "nero" });

                if ((sb.file == null))return;
          
                pathtoAIFileaccess=sb.file.substring (0,sb.file.indexOf (".",1));
                
              if(JOptionPane.NO_OPTION== JOptionPane
                    .showConfirmDialog(this, "<HTML><center><font size=3 color=blue>"
                               + sb.file
                               + "<br><font size=4 color=red>AI precalculated to load!!!", "Set up", JOptionPane.YES_NO_OPTION,
                               JOptionPane.INFORMATION_MESSAGE))return;
              
               
    }//GEN-LAST:event_load_browseActionPerformed

    private void save_browseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_save_browseActionPerformed
    MySimpleBrowser sb =
                    new MySimpleBrowser(this,
                                        "Select the AI file", pathtoAIFileaccess, true,
                                        true, new String[] { "nero" });

                if ((sb.file == null))return;
          
                pathtoAIFileaccess=sb.file.substring (0,sb.file.indexOf (".",1));
                
                JOptionPane
                    .showMessageDialog(null, "<HTML><center><font size=3 color=blue>"
                               + sb.file
                               + "<br><font size=4 color=red>AI precalculated to save!!!", "Set up", JOptionPane
                                   .INFORMATION_MESSAGE);
    }//GEN-LAST:event_save_browseActionPerformed

    private void setknownActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_setknownActionPerformed
        // TODO add your handling code here:
        // set last known data from into inset
     setknowntodatasets();
    }//GEN-LAST:event_setknownActionPerformed
    private void setknowntodatasets()
    {
       if(workOnData==null)return;
        double d[]=new double[5];
        double dh[]=new double[7];
        int k=0;
        for(int i=workOnData.size()-inputsets.length;i<workOnData.size();i++)
        {
                    Object o[]=(((TDoc) workOnData.get(i)).o);
                    d[0]=((Float)o[4]).floatValue();
                    d[1]=((Float)o[3]).floatValue();
                    d[2]=((Float)o[1]).floatValue();
                    d[3]=((Float)o[2]).floatValue();
                    d[4]=((Float)o[5]).floatValue();
                     dh[0]=((Float)o[6]).floatValue();
                    dh[1]=((Float)o[7]).floatValue();
                    dh[2]=((Float)o[8]).floatValue();
                    dh[3]=((Float)o[9]).floatValue();
                    dh[4]=((Float)o[10]).floatValue();
                    dh[5]=((Float)o[11]).floatValue();
                    dh[6]=((Float)o[12]).floatValue();
                  if(k<inputsets.length) 
                  {
                      inputsets[k].setData(d);
                      inputsets[k].setHidenOnChangeData(dh);
                      k++;
                  }
        }
    }
    String pathtoAIFileaccess="";
    private void LoadActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_LoadActionPerformed
        //nnc=new Test_2H_2(cbstock.getSelectedItem().toString());
        if(!pathtoAIFileaccess.isEmpty())
        {
        nnc=new Test_2H_2(pathtoAIFileaccess);
        clearInputs();
        initInputSets(nnc.getInputLayerSize()/7);
        }else
        {
         JOptionPane
                    .showMessageDialog(this, "<HTML><center><font size=3 color=blue>"
                               + "<br><font size=4 color=red>Select first file to load!!!", "Set up", JOptionPane
                                   .INFORMATION_MESSAGE);
        }
    }//GEN-LAST:event_LoadActionPerformed

    private void numinputsInputMethodTextChanged(java.awt.event.InputMethodEvent evt) {//GEN-FIRST:event_numinputsInputMethodTextChanged
        int trows=Integer.parseInt(numinputs.getText());
        if(trows>0&&trows<10) {
            this.realnuminputs.setText(""+(trows*7));
        }
    }//GEN-LAST:event_numinputsInputMethodTextChanged

    private void resetActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_resetActionPerformed
        nnc=new Test_2H_2(this.dbc,Integer.parseInt(hl1size.getText()),Integer.parseInt(hl2size.getText()),Integer.parseInt(numinputs.getText()),ispercentaged.isSelected());
        clearInputs();
        initInputSets();
    }//GEN-LAST:event_resetActionPerformed

    private void saveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveActionPerformed
        //nnc.setFileName(cbstock.getSelectedItem().toString());
        nnc.setFileName(pathtoAIFileaccess);
        nnc.save();
    }//GEN-LAST:event_saveActionPerformed

    private void trainActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_trainActionPerformed
        nnc.setminErrAcceptedOnNIter(Double.parseDouble(minErrAcceptedOnNIter.getText()));
        nnc.completeuser(workOnData, Integer.parseInt(numinputs.getText()), Integer.parseInt(hl1size.getText()),Integer.parseInt(hl2size.getText()),Test_2H_2.ABS_SUM,ispercentaged.isSelected(),false);
    }//GEN-LAST:event_trainActionPerformed

    private void closeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_closeActionPerformed
        if(runnc!=null){runnc.dostop();runnc=null;}
        dispose();
    }//GEN-LAST:event_closeActionPerformed

private void jButtonset2datalistbackActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonset2datalistbackActionPerformed
//create new datapoint as all in curent list
        TDoc t= new TDoc(((TDoc)pdataTrade.get(0)).o.length);
         // set predicted data
         
         //set property of data point
        t.oadv=new String[1];
        t.oadv[0]=new String("AI");
        //set the next date from previous date
        
        //add data point
        pdataTrade.add(t);
}//GEN-LAST:event_jButtonset2datalistbackActionPerformed

rungenerateallnnc runnc=null;
private void performallnncActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_performallnncActionPerformed
    if(runnc!=null){runnc.dostop();runnc=null;}
    runnc=new rungenerateallnnc(this.dbc);
}//GEN-LAST:event_performallnncActionPerformed

FolderSelectUtil fs=null;
int cfolderid=0;
String pathtoXLSFileaccess="";
private void runonfolderActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_runonfolderActionPerformed
if(fs!=null){fs.dispose();fs=null;}
fs=new FolderSelectUtil(this.dbc,uid,this);
}//GEN-LAST:event_runonfolderActionPerformed
    
    private void initInputSets() {
        int trows=Integer.parseInt(numinputs.getText());
        initInputSets(trows);
    }
    private void initInputSets(int trows) {
        jPanel_IOS.setLayout(new GridLayout(trows+1,0));
        inputsets=new DataMinimalNNSetEX[trows];
       for(int i=0;i<trows;i++)
       {
        inputsets[i]=new DataMinimalNNSetEX();
        inputsets[i].setBorder(new TitledBorder("Known base data"+(i+1)));
        jPanel_IOS.add(inputsets[i]);
       }
    }
    public void setSymbolAndLock(String stn) {
        ((MySimleInputByCombo)cbstock).setSelectedbyVc1(stn);
        cbstock.setEnabled(false);
        curentsymbol=stn;
        curentmid=Integer.parseInt(((MySimleInputByCombo)cbstock).getVc2byVc1(stn));
        workOnData=nnc.buildInAndOutData(this.dbc,curentmid,Integer.parseInt(numinputs.getText()),ispercentaged.isSelected(),null);
    }

    private void clearInputs() {
        
       jPanel_IOS.removeAll() ;
    }
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {

                Test_2H_2_GUI_NBF t=new Test_2H_2_GUI_NBF(true,null,0);
            }
        });
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton Load;
    private javax.swing.JComboBox cbstock;
    private javax.swing.JButton close;
    private javax.swing.JTextArea hl1size;
    private javax.swing.JTextArea hl2size;
    private javax.swing.JCheckBox ispercentaged;
    private javax.swing.JButton jButtonset2datalistback;
    private javax.swing.JCheckBox jCheckBox1;
    private javax.swing.JCheckBox jCheckBox2;
    private javax.swing.JCheckBox jCheckBox3;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel_IOS;
    private javax.swing.JProgressBar jProgressBar1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JButton load_browse;
    private javax.swing.JTextField minErrAcceptedOnNIter;
    private javax.swing.JTextArea numinputs;
    private myCForms.DataMinimalNNSet output;
    private javax.swing.JLabel pecoki;
    private javax.swing.JLabel pemoki;
    private javax.swing.JButton performallnnc;
    private javax.swing.JLabel pesdoki;
    private javax.swing.JLabel pevoki;
    private javax.swing.JButton predict;
    private javax.swing.JTextArea realnuminputs;
    private javax.swing.JTextArea realnumoutputs;
    private javax.swing.JButton reset;
    private javax.swing.JButton runonfolder;
    private javax.swing.JButton runperformancer;
    private javax.swing.JButton save;
    private javax.swing.JButton save_browse;
    private javax.swing.JCheckBox saveedtfonly;
    private javax.swing.JButton setknown;
    private javax.swing.JButton train;
    private javax.swing.JButton viewAImap;
    private javax.swing.JButton viewmap;
    // End of variables declaration//GEN-END:variables

    //TODO on windows closing STOP NNC 
    private Test_2H_2 nnc;

   private DataMinimalNNSetEX[] inputsets;
    
}
